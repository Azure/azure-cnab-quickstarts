name: airflow
version: 0.1.1
dockerfile: Dockerfile.tmpl
description: "Apache Airflow on Kubernetes"
invocationImage: cnabquickstarts.azurecr.io/porter/airflow:0.1.0
tag: cnabquickstarts.azurecr.io/porter/airflow/bundle:0.1.0

credentials:
  - name: kubeconfig
    path: /root/.kube/config

parameters:
  - name: namespace
    type: string
    default: ''
  - name: airflow_name
    type: string
    default: airflow01

  - name: airflow_fernetKey
    type: string
    description: Fernet key
    default: ''
    destination:
      env: AIRFLOW_FERNETKEY
  - name: airflow_service_type
    type: string
    description: service type for Airflow UI
    default: 'ClusterIP'
    destination:
      env: AIRFLOW_SERVICE_TYPE
  - name: airflow_service_annotations
    type: string
    description: service annotations for Airflow UI
    default: '{}'
    destination:
      env: AIRFLOW_SERVICE_ANNOTATIONS
  - name: airflow_service_externalPort
    type: integer
    description: external port for Airflow UI
    default: 8080
    destination:
      env: AIRFLOW_SERVICE_EXTERNALPORT
  - name: airflow_service_nodePort_http
    type: string
    description: when using service.type == NodePort, an optional NodePort to request
    default: ''
    destination:
      env: AIRFLOW_SERVICE_NODEPORT_HTTP
  - name: airflow_executor
    type: string
    description: the executor to run
    default: 'Celery'
    destination:
      env: AIRFLOW_EXECUTOR
  - name: airflow_initRetryLoop
    type: string
    description: max number of retries during container init
    default: ''
    destination:
      env: AIRFLOW_INITRETRYLOOP
  - name: airflow_image_repository
    type: string
    description: Airflow docker image
    default: 'puckel/docker-airflow'
    destination:
      env: AIRFLOW_IMAGE_REPOSITORY
  - name: airflow_image_tag
    type: string
    description: Airflow docker tag
    default: '1.10.4'
    destination:
      env: AIRFLOW_IMAGE_TAG
  - name: airflow_image_pullPolicy
    type: string
    enum: ["Always", "IfNotPresent"]
    description: Image pull policy
    default: 'IfNotPresent'
    destination:
      env: AIRFLOW_IMAGE_PULLPOLICY
  - name: airflow_image_pullSecret
    type: string
    description: Image pull secret
    default: ''
    destination:
      env: AIRFLOW_IMAGE_PULLSECRET
  - name: airflow_schedulerNumRuns
    type: string
    description: -1 to loop indefinitively, 1 to restart after each exec
    enum: ["-1", "1"]
    default: '-1'
    destination:
      env: AIRFLOW_SCHEDULERNUMRUNS
  - name: airflow_webReplicas
    type: integer
    description: how many replicas for web server
    default: 1
    destination:
      env: AIRFLOW_WEBREPLICAS
  - name: airflow_config
    type: string
    description: custom airflow configuration env variables
    default: '{}'
    destination:
      env: AIRFLOW_CONFIG
  - name: airflow_podDisruptionBudget
    type: string
    description: control pod disruption budget
    default: '{"maxUnavailable": 1}'
    destination:
      env: AIRFLOW_PODDISRUPTIONBUDGET
  - name: airflow_extraEnv
    type: string
    description: specify additional environment variables to mount
    default: '[]'
    destination:
      env: AIRFLOW_EXTRAENV
  - name: airflow_extraConfigmapMounts
    type: string
    description: Additional configMap volume mounts on the airflow pods.
    default: '[]'
    destination:
      env: AIRFLOW_EXTRACONFIGMAPMOUNTS
  - name: airflow_podAnnotations
    type: string
    description: annotations for scheduler, worker and web pods
    default: '{}'
    destination:
      env: AIRFLOW_PODANNOTATIONS
  - name: airflow_extraInitContainers
    type: string
    description: additional Init Containers to run in the scheduler pods
    default: '[]'
    destination:
      env: AIRFLOW_EXTRAINITCONTAINERS
  - name: airflow_extraContainers
    type: string
    description: additional containers to run in the scheduler, worker & web pods
    default: '[]'
    destination:
      env: AIRFLOW_EXTRACONTAINERS
  - name: airflow_extraVolumeMounts
    type: string
    description: additional volumeMounts to the main container in scheduler, worker & web pods
    default: '[]'
    destination:
      env: AIRFLOW_EXTRAVOLUMEMOUNTS
  - name: airflow_extraVolumes
    type: string
    description: additional volumes for the scheduler, worker & web pods
    default: '[]'
    destination:
      env: AIRFLOW_EXTRAVOLUMES
  - name: airflow_initdb
    type: boolean
    description: run airflow initdb when starting the scheduler
    default: true
    destination:
      env: AIRFLOW_INITDB
  - name: flower_resources
    type: string
    description: custom resource configuration for flower pod
    default: '{}'
    destination:
      env: FLOWER_RESOURCES
  - name: flower_service_type
    type: string
    description: service type for Flower UI
    default: 'ClusterIP'
    destination:
      env: FLOWER_SERVICE_TYPE
  - name: flower_service_annotations
    type: string
    description: service annotations for Flower UI
    default: '{}'
    destination:
      env: FLOWER_SERVICE_ANNOTATIONS
  - name: flower_service_externalPort
    type: integer
    description: external port for Flower UI
    default: 5555
    destination:
      env: FLOWER_SERVICE_EXTERNALPORT
  - name: web_resources
    type: string
    description: custom resource configuration for web pod
    default: '{}'
    destination:
      env: WEB_RESOURCES
  - name: web_initialStartupDelay
    type: integer
    description: amount of time webserver pod should sleep before initializing webserver
    default: 60
    destination:
      env: WEB_INITIALSTARTUPDELAY
  - name: web_livenessProbe_periodSeconds
    type: integer
    description: interval between probes
    default: 60
    destination:
      env: WEB_LIVENESSPROBE_PERIODSECONDS
  - name: web_livenessProbe_timeoutSeconds
    type: integer
    description: time allowed for a result to return
    default: 1
    destination:
      env: WEB_LIVENESSPROBE_TIMEOUTSECONDS
  - name: web_livenessProbe_successThreshold
    type: integer
    description: Minimum consecutive successes for the probe to be considered successful
    default: 1
    destination:
      env: WEB_LIVENESSPROBE_SUCCESSTHRESHOLD
  - name: web_livenessProbe_failureThreshold
    type: integer
    description: Minimum consecutive successes for the probe to be considered failed
    default: 5
    destination:
      env: WEB_LIVENESSPROBE_FAILURETHRESHOLD
  - name: web_readinessProbe_periodSeconds
    type: integer
    description: interval between probes
    default: 60
    destination:
      env: WEB_READINESSPROBE_PERIODSECONDS
  - name: web_readinessProbe_timeoutSeconds
    type: integer
    description: time allowed for a result to return
    default: 1
    destination:
      env: WEB_READINESSPROBE_TIMEOUTSECONDS
  - name: web_readinessProbe_successThreshold
    type: integer
    description: Minimum consecutive successes for the probe to be considered successful
    default: 1
    destination:
      env: WEB_READINESSPROBE_SUCCESSTHRESHOLD
  - name: web_readinessProbe_failureThreshold
    type: integer
    description: Minimum consecutive successes for the probe to be considered failed
    default: 5
    destination:
      env: WEB_READINESSPROBE_FAILURETHRESHOLD
  - name: web_initialDelaySeconds
    type: integer
    description: initial delay on livenessprobe before checking if webserver is available
    default: 360
    destination:
      env: WEB_INITIALDELAYSECONDS
  - name: web_secretsDir
    type: string
    description: directory in which to mount secrets on webserver nodes
    default: '/var/airflow/secrets'
    destination:
      env: WEB_SECRETSDIR
  - name: web_secrets
    type: string
    description: secrets to mount as volumes on webserver nodes
    default: '[]'
    destination:
      env: WEB_SECRETS
  - name: scheduler_resources
    type: string
    description: custom resource configuration for scheduler pod
    default: '{}'
    destination:
      env: SCHEDULER_RESOURCES
  - name: workers_enabled
    type: boolean
    description: enable workers
    default: true
    destination:
      env: WORKERS_ENABLED
  - name: workers_replicas
    type: integer
    description: number of workers pods to launch
    default: 1
    destination:
      env: WORKERS_REPLICAS
  - name: workers_resources
    type: string
    description: custom resource configuration for worker pod
    default: '{}'
    destination:
      env: WORKERS_RESOURCES
  - name: workers_celery_instances
    type: integer
    description: number of parallel celery tasks per worker
    default: 1
    destination:
      env: WORKERS_CELERY_INSTANCES
  - name: workers_podAnnotations
    type: string
    description: annotations for the worker pods
    default: '{}'
    destination:
      env: WORKERS_PODANNOTATIONS
  - name: workers_secretsDir
    type: string
    description: directory in which to mount secrets on worker nodes
    default: '/var/airflow/secrets'
    destination:
      env: WORKERS_SECRETSDIR
  - name: workers_secrets
    type: string
    description: secrets to mount as volumes on worker nodes
    default: '[]'
    destination:
      env: WORKERS_SECRETS
  - name: nodeSelector
    type: string
    description: Node labels for pod assignment
    default: '{}'
    destination:
      env: NODESELECTOR
  - name: affinity
    type: string
    description: Affinity labels for pod assignment
    default: '{}'
    destination:
      env: AFFINITY
  - name: tolerations
    type: string
    description: Toleration labels for pod assignment
    default: '[]'
    destination:
      env: TOLERATIONS
  - name: ingress_enabled
    type: boolean
    description: enable ingress
    default: false
    destination:
      env: INGRESS_ENABLED
  - name: ingress_web_host
    type: string
    description: hostname for the webserver ui
    default: ''
    destination:
      env: INGRESS_WEB_HOST
  - name: ingress_web_path
    type: string
    description: path of the webserver ui
    default: ''
    destination:
      env: INGRESS_WEB_PATH
  - name: ingress_web_annotations
    type: string
    description: annotations for the web ui ingress
    default: '{}'
    destination:
      env: INGRESS_WEB_ANNOTATIONS
  - name: ingress_web_livenessPath
    type: string
    description: path to the web liveness probe
    default: '/health'
    destination:
      env: INGRESS_WEB_LIVENESSPATH
  - name: ingress_web_tls_enabled
    type: boolean
    description: enables TLS termination at the ingress
    default: false
    destination:
      env: INGRESS_WEB_TLS_ENABLED
  - name: ingress_web_tls_secretName
    type: string
    description: name of the secret containing the TLS certificate & key
    default: ''
    destination:
      env: INGRESS_WEB_TLS_SECRETNAME
  - name: ingress_flower_host
    type: string
    description: hostname for the flower ui
    default: '""'
    destination:
      env: INGRESS_FLOWER_HOST
  - name: ingress_flower_path
    type: string
    description: path of the flower ui
    default: ''
    destination:
      env: INGRESS_FLOWER_PATH
  - name: ingress_flower_livenessPath
    type: string
    description: path to the liveness probe
    default: '/'
    destination:
      env: INGRESS_FLOWER_LIVENESSPATH
  - name: ingress_flower_annotations
    type: string
    description: annotations for the flower ui ingress
    default: '{}'
    destination:
      env: INGRESS_FLOWER_ANNOTATIONS
  - name: ingress_flower_tls_enabled
    type: boolean
    description: enables TLS termination at the ingress
    default: false
    destination:
      env: INGRESS_FLOWER_TLS_ENABLED
  - name: ingress_flower_tls_secretName
    type: string
    description: name of the secret containing the TLS certificate & key
    default: ''
    destination:
      env: INGRESS_FLOWER_TLS_SECRETNAME
  - name: persistence_enabled
    type: boolean
    description: enable persistence storage for DAGs
    default: false
    destination:
      env: PERSISTENCE_ENABLED
  - name: persistence_existingClaim
    type: string
    description: if using an existing claim, specify the name here
    default: ''
    destination:
      env: PERSISTENCE_EXISTINGCLAIM
  - name: persistence_subPath
    type: string
    description: (optional) relative path on the volume to use for DAGs
    default: ''
    destination:
      env: PERSISTENCE_SUBPATH
  - name: persistence_storageClass
    type: string
    description: Persistent Volume Storage Class
    default: ''
    destination:
      env: PERSISTENCE_STORAGECLASS
  - name: persistence_accessMode
    type: string
    description: PVC access mode
    default: 'ReadWriteOnce'
    destination:
      env: PERSISTENCE_ACCESSMODE
  - name: persistence_size
    type: string
    description: Persistant storage size request
    default: '1Gi'
    destination:
      env: PERSISTENCE_SIZE
  - name: logsPersistence_enabled
    type: boolean
    description: enable persistent storage for logs
    default: false
    destination:
      env: LOGSPERSISTENCE_ENABLED
  - name: logsPersistence_existingClaim
    type: string
    description: if using an existing claim, specify the name here
    default: ''
    destination:
      env: LOGSPERSISTENCE_EXISTINGCLAIM
  - name: logsPersistence_subPath
    type: string
    description: (optional) relative path on the volume to use for logs
    default: ''
    destination:
      env: LOGSPERSISTENCE_SUBPATH
  - name: logsPersistence_storageClass
    type: string
    description: Persistent Volume Storage Class
    default: ''
    destination:
      env: LOGSPERSISTENCE_STORAGECLASS
  - name: logsPersistence_accessMode
    type: string
    description: PVC access mode
    default: 'ReadWriteOnce'
    destination:
      env: LOGSPERSISTENCE_ACCESSMODE
  - name: logsPersistence_size
    type: string
    description: Persistant storage size request
    default: '1Gi'
    destination:
      env: LOGSPERSISTENCE_SIZE
  - name: dags_doNotPickle
    type: boolean
    description: should the scheduler disable DAG pickling
    default: false
    destination:
      env: DAGS_DONOTPICKLE
  - name: dags_path
    type: string
    description: mount path for persistent volume
    default: '/usr/local/airflow/dags'
    destination:
      env: DAGS_PATH
  - name: dags_initContainer_enabled
    type: boolean
    description: Fetch the source code when the pods starts
    default: false
    destination:
      env: DAGS_INITCONTAINER_ENABLED
  - name: dags_initContainer_image_repository
    type: string
    description: Init container Docker image.
    default: 'alpine/git'
    destination:
      env: DAGS_INITCONTAINER_IMAGE_REPOSITORY
  - name: dags_initContainer_image_tag
    type: string
    description: Init container Docker image tag.
    default: '1.0.7'
    destination:
      env: DAGS_INITCONTAINER_IMAGE_TAG
  - name: dags_initContainer_installRequirements
    type: boolean
    description: auto install requirements.txt deps
    default: true
    destination:
      env: DAGS_INITCONTAINER_INSTALLREQUIREMENTS
  - name: dags_git_url
    type: string
    description: url to clone the git repository
    default: ''
    destination:
      env: DAGS_GIT_URL
  - name: dags_git_ref
    type: string
    description: branch name, tag or sha1 to reset to
    default: 'master'
    destination:
      env: DAGS_GIT_REF
  - name: dags_git_secret
    type: string
    description: name of a secret containing an ssh deploy key
    default: ''
    destination:
      env: DAGS_GIT_SECRET
  - name: logs_path
    type: string
    description: mount path for logs persistent volume
    default: '/usr/local/airflow/logs'
    destination:
      env: LOGS_PATH
  - name: rbac_create
    type: boolean
    description: create RBAC resources
    default: true
    destination:
      env: RBAC_CREATE
  - name: serviceAccount_create
    type: boolean
    description: create a service account
    default: true
    destination:
      env: SERVICEACCOUNT_CREATE
  - name: serviceAccount_name
    type: string
    description: the service account name
    default: ''
    destination:
      env: SERVICEACCOUNT_NAME
  - name: postgresql_enabled
    type: boolean
    description: create a postgres server
    default: true
    destination:
      env: POSTGRESQL_ENABLED
  - name: postgresql_existingSecret
    type: string
    description: The name of an existing secret with a key named postgresql.existingSecretKey to use as the password
    default: ''
    destination:
      env: POSTGRESQL_EXISTINGSECRET
  - name: postgresql_existingSecretKey
    type: string
    description: The name of the key containing the password in the secret named postgresql.existingSecret
    default: 'postgres-password'
    destination:
      env: POSTGRESQL_EXISTINGSECRETKEY
  - name: postgresql_uri
    type: string
    description: full URL to custom postgres setup
    default: ''
    destination:
      env: POSTGRESQL_URI
  - name: postgresql_postgresHost
    type: string
    description: PostgreSQL Hostname
    default: ''
    destination:
      env: POSTGRESQL_POSTGRESHOST
  - name: postgresql_postgresUser
    type: string
    description: PostgreSQL User
    default: 'postgres'
    destination:
      env: POSTGRESQL_POSTGRESUSER
  - name: postgresql_postgresPassword
    type: string
    description: PostgreSQL Password
    default: 'airflow'
    destination:
      env: POSTGRESQL_POSTGRESPASSWORD
  - name: postgresql_postgresDatabase
    type: string
    description: PostgreSQL Database name
    default: 'airflow'
    destination:
      env: POSTGRESQL_POSTGRESDATABASE
  - name: postgresql_persistence_enabled
    type: boolean
    description: Enable Postgres PVC
    default: true
    destination:
      env: POSTGRESQL_PERSISTENCE_ENABLED
  - name: postgresql_persistance_storageClass
    type: string
    description: Persistant class
    default: ''
    destination:
      env: POSTGRESQL_PERSISTANCE_STORAGECLASS
  - name: postgresql_persistance_accessMode
    type: string
    description: Access mode
    default: 'ReadWriteOnce'
    destination:
      env: POSTGRESQL_PERSISTANCE_ACCESSMODE
  - name: redis_enabled
    type: boolean
    description: Create a Redis cluster
    default: true
    destination:
      env: REDIS_ENABLED
  - name: redis_existingSecret
    type: string
    description: The name of an existing secret with a key named redis.existingSecretKey to use as the password
    default: ''
    destination:
      env: REDIS_EXISTINGSECRET
  - name: redis_existingSecretKey
    type: string
    description: The name of the key containing the password in the secret named redis.existingSecret
    default: 'redis-password'
    destination:
      env: REDIS_EXISTINGSECRETKEY
  - name: redis_redisHost
    type: string
    description: Redis Hostname
    default: ''
    destination:
      env: REDIS_REDISHOST
  - name: redis_password
    type: string
    description: Redis password
    default: 'airflow'
    destination:
      env: REDIS_PASSWORD
  - name: redis_master_persistence_enabled
    type: boolean
    description: Enable Redis PVC
    default: false
    destination:
      env: REDIS_MASTER_PERSISTENCE_ENABLED
  - name: redis_cluster_enabled
    type: boolean
    description: enable master-slave cluster
    default: false
    destination:
      env: REDIS_CLUSTER_ENABLED
  - name: serviceMonitor_enabled
    type: boolean
    description: enable service monitor
    default: false
    destination:
      env: SERVICEMONITOR_ENABLED
  - name: serviceMonitor_interval
    type: string
    description: Interval at which metrics should be scraped
    default: '30s'
    destination:
      env: SERVICEMONITOR_INTERVAL
  - name: serviceMonitor_path
    type: string
    description: The path at which the metrics should be scraped
    default: '/admin/metrics'
    destination:
      env: SERVICEMONITOR_PATH
  - name: serviceMonitor_selector
    type: string
    description: label Selector for Prometheus to find ServiceMonitors
    default: 'prometheus: kube-prometheus'
    destination:
      env: SERVICEMONITOR_SELECTOR
  - name: prometheusRule_enabled
    type: boolean
    description: enable prometheus rule
    default: false
    destination:
      env: PROMETHEUSRULE_ENABLED
  - name: prometheusRule_groups
    type: string
    description: define alerting rules
    default: '{}'
    destination:
      env: PROMETHEUSRULE_GROUPS
  - name: prometheusRule_additionalLabels
    type: string
    description: add additional labels to the prometheus rule
    default: '{}'
    destination:
      env: PROMETHEUSRULE_ADDITIONALLABELS

mixins:
  - exec
  - helm

install:
  - exec:
      description: "Replace tokens in values.yaml.template"
      command: "bash"
      arguments: 
        - "airflow.sh" 
        - "replace-tokens"
  - helm:
      description: "Install Airflow"
      name: "{{ bundle.parameters.airflow_name }}"
      chart: stable/airflow
      namespace: "{{ bundle.parameters.namespace }}"
      replace: true
      values:
        - /cnab/app/values.yaml

upgrade:
  - exec:
      description: "Replace tokens in values.yaml.template"
      command: "bash"
      arguments: 
        - "airflow.sh" 
        - "replace-tokens"
  - helm:
      description: "Upgrade Airflow"
      name: "{{ bundle.parameters.airflow_name }}"
      chart: stable/airflow
      namespace: "{{ bundle.parameters.namespace }}"
      values:
        - /cnab/app/values.yaml
     
uninstall:
  - helm:
      description: "Uninstall Airflow"
      purge: true
      releases:
        - "{{ bundle.parameters.airflow_name }}"
