name: sql-server-always-on-aks
version: 0.6.0
description: "SQL Server Always On for AKS"
invocationImage: cnabquickstarts.azurecr.io/porter/sql-server-always-on-aks:0.6.0
tag: cnabquickstarts.azurecr.io/porter/sql-server-always-on-aks/bundle:0.6.0

credentials:
- name: azure_client_id
  env: AZURE_CLIENT_ID
  description: AAD Client ID for Azure account authentication - used for AKS Cluster SPN details and for authentication to azure to get KubeConfig
- name: azure_tenant_id
  env: AZURE_TENANT_ID
  description: Azure AAD Tenant Id for Azure account authentication - used to authenticate to Azure to get KubeConfig 
- name: azure_client_secret
  env: AZURE_CLIENT_SECRET
  description: AAD Client Secret for Azure account authentication - used for AKS Cluster SPN details and for authentication to azure to get KubeConfig
- name: sql_sapassword
  env: SQL_SAPASSWORD
  description: The Password for the sa user in SQL Server
- name: sql_masterkeypassword
  env: SQL_MASTERKEYPASSWORD
  description: The Password for the SQL Server Master Key
- name: azure_subscription_id
  env: AZURE_SUBSCRIPTION_ID
  description: Azure Subscription Id used to set the subscription where the account has access to multiple subscriptions

parameters:
- name: aks_resource_group
  type: string
  default: sql-server-always-on
  description: The name of the resource group to create the AKS Cluster in
  destination:
    env: AKS_RESOURCE_GROUP
- name: aks_cluster_name
  type: string
  default: sql-server-aks
  description: The name to use for the AKS Cluster
  destination:
    env: AKS_CLUSTER_NAME
- name: azure_location
  type: string
  description: The Azure location to create the resources in
  destination:
    env: LOCATION
    
mixins:
  - exec
  - azure
  - kubernetes
  - az

install:
  - azure:
      description: "Create AKS"
      type: aks
      template: ""
      name: "{{ bundle.parameters.aks_cluster_name }}"
      resourceGroup: "{{ bundle.parameters.aks_resource_group }}"
      parameters:
        clusterName: "{{ bundle.parameters.aks_cluster_name }}"
        servicePrincipalClientId: "{{ bundle.credentials.azure_client_id}}"
        servicePrincipalClientSecret: "{{ bundle.credentials.azure_client_secret}}"
        location: "{{ bundle.parameters.azure_location }}"
        agentCount: "4"
        kubernetesVersion: "1.14.6"

  - az: 
      description: "Azure CLI login"
      arguments: 
        - "login" 
      flags:
        service-principal:
        username: "{{ bundle.credentials.azure_client_id}}"
        password: "{{ bundle.credentials.azure_client_secret}}"
        tenant: "{{ bundle.credentials.azure_tenant_id}}"

  - az: 
      description: "Azure set subscription Id"
      arguments: 
        - "account" 
        - "set" 
      flags:
        subscription: "{{ bundle.credentials.azure_subscription_id}}"

  - az: 
      description: "Azure CLI AKS get-credentials"
      arguments: 
        - "aks" 
        - "get-credentials" 
      flags:
        resource-group: "{{ bundle.parameters.aks_resource_group }}"
        name: "{{ bundle.parameters.aks_cluster_name }}"

  - kubernetes:
      description: "Create SQL Operator"
      manifests:
        - /cnab/app/manifests/sql-operator.yaml
      wait: true  

  - exec: 
      description: "Create Kubernetes Secrets"
      command: "kubectl"
      arguments: 
        - "create" 
        - "secret" 
        - "generic"         
        - "sql-secrets" 
        - "--from-literal=sapassword={{ bundle.credentials.sql_sapassword }}"
        - "--from-literal=masterkeypassword={{ bundle.credentials.sql_masterkeypassword }}"
        - "--namespace" 
        - "ag1"
  
  - exec: 
      description: "Wait for SQL Custom Resource"
      command: "bash"
      arguments: 
        - "-c" 
        - "crd='';while [[ -z $crd ]];do crd=$(kubectl get crd --field-selector=metadata.name=sqlservers.mssql.microsoft.com --ignore-not-found=true);echo 'Waiting for sql server CRD to be created'; sleep 30;done" 
 
  - kubernetes:
      description: "Create SQL Server"
      manifests:
        - /cnab/app/manifests/sql-server.yaml
      wait: true  
  
  - kubernetes:
      description: "Create Kubernetes Services"
      manifests:
        - /cnab/app/manifests/ag-services.yaml
      wait: true  
    
  - exec: 
      description: "Output Primary IP Address"
      command: "bash"
      arguments: 
        - "-c" 
        - "PRIMARY_IP='';while [[ -z $PRIMARY_IP ]];do PRIMARY_IP=$(kubectl get svc/ag1-primary -n ag1 -o=jsonpath='{.status.loadBalancer.ingress[0].ip}' --ignore-not-found=true);echo 'Waiting for primary AG IP Address'; sleep 30;done; echo Connect to SQL Primary: sqlcmd -S ${PRIMARY_IP} -U sa;" 

uninstall:
  - az: 
      description: "Azure CLI login"
      arguments: 
        - "login" 
      flags:
        service-principal: 
        username: "{{ bundle.credentials.azure_client_id}}"
        password: "{{ bundle.credentials.azure_client_secret}}"
        tenant: "{{ bundle.credentials.azure_tenant_id}}"

  - az: 
      description: "Delete App resource group"
      arguments: 
        - "group" 
        - "delete" 
      flags:
        name: "{{ bundle.parameters.aks_resource_group }}"
        yes:
        